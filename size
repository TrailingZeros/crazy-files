#!/usr/bin/env groovy
@GrabResolver(name = 'jitpack', root = 'https://jitpack.io')
@GrabResolver(name = 'central', root = 'http://central.maven.org/maven2/')
@Grab('com.github.nao20010128nao:CryptorageExtras:128a3b8')
@Grab('com.github.nao20010128nao:HttpServerJava:4582a9d30f')
import com.nao20010128nao.Cryptorage.ExposedKt as UtilsKt
import com.nao20010128nao.CryptorageExtras.UtilsKt as Extras
import com.nao20010128nao.CryptorageExtras.indexer.IndexedKt

def pass = System.env.PASSWORD
def data=System.env.VIDEOS_PREFIX?:"data"
def master=System.env.VIDEOS_PREFIX?:"master"
def endpoint=System.env.ENDPOINT

def base
if(args){
  def num=args[0]
  if(num=="local"){
    fs = UtilsKt.asFileSource(new File("bkup"))
  }else{
    fs = UtilsKt.asFileSource(
      new URL("$endpoint/$data-$num/raw/master")
    )
  }
  base = UtilsKt.withV1Encryption(fs, pass)
}else{
  def dir=UtilsKt.asFileSource(
    new URL("$endpoint/indexed/raw/$master")
  )
  base=IndexedKt.withV1IndexedEncryption(dir,pass,false)
}

def lst=base.list()
def count=new BigDecimal(lst.length)
def bdSize=lst.collect(base.&size).collect{new BigDecimal(it)}
def rawSize = bdSize.sum()?:0
def giga = new BigDecimal(1000).pow(3)
def gibi = new BigDecimal(1024).pow(3)

println rawSize
println rawSize/giga
println rawSize/gibi
println "count: $count"
println "remaining: ${gibi-rawSize}"

if(count.signum()!=0){
  def average=rawSize/count
  def squareSum=bdSize.collect{it.pow(2)}.sum()?:0 
  def squareAverage=squareSum/count
  def variance=squareAverage-average.pow(2)

  println "average: $average"
  println "variance: $variance"
}
